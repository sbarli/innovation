# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type AccessTokenPayload {
  authToken: String!
}

type AgeAchievements {
  EIGHT: ID!
  FIVE: ID!
  FOUR: ID!
  NINE: ID!
  ONE: ID!
  SEVEN: ID!
  SIX: ID!
  THREE: ID!
  TWO: ID!
}

input AgeAchievementsInput {
  EIGHT: ID!
  FIVE: ID!
  FOUR: ID!
  NINE: ID!
  ONE: ID!
  SEVEN: ID!
  SIX: ID!
  THREE: ID!
  TWO: ID!
}

type AuthResponse {
  authToken: String!
  refreshToken: String!
  user: UserWithoutPassword!
}

type Board {
  blue: BoardPile!
  green: BoardPile!
  purple: BoardPile!
  red: BoardPile!
  yellow: BoardPile!
}

input BoardInput {
  blue: BoardPileInput!
  green: BoardPileInput!
  purple: BoardPileInput!
  red: BoardPileInput!
  yellow: BoardPileInput!
}

type BoardPile {
  cardRefs: [ID!]!
  splayed: SplayOption
}

input BoardPileInput {
  cardRefs: [ID!]!
  splayed: SplayOption
}

type Card {
  _id: ID!
  age: Int!
  cardId: String!
  color: String!
  dogmaEffects: [DogmaEffect!]!
  dogmaResource: String!
  name: String!
  resourceSpaces: ResourceSpaces!
  resourceTotals: ResourceTotals!
}

type CardIdAndRef {
  cardId: String!
  ref: ID!
}

type CardIdAndRefByAge {
  EIGHT: [CardIdAndRef!]!
  FIVE: [CardIdAndRef!]!
  FOUR: [CardIdAndRef!]!
  NINE: [CardIdAndRef!]!
  ONE: [CardIdAndRef!]!
  SEVEN: [CardIdAndRef!]!
  SIX: [CardIdAndRef!]!
  TEN: [CardIdAndRef!]!
  THREE: [CardIdAndRef!]!
  TWO: [CardIdAndRef!]!
}

type CardRefsByAge {
  EIGHT: [String!]!
  FIVE: [String!]!
  FOUR: [String!]!
  NINE: [String!]!
  ONE: [String!]!
  SEVEN: [String!]!
  SIX: [String!]!
  TEN: [String!]!
  THREE: [String!]!
  TWO: [String!]!
}

type CloseRoomResponse {
  success: Boolean!
}

input CreateGameInput {
  ageAchievements: AgeAchievementsInput!
  currentActionNumber: Float!
  currentPlayerRef: ID!
  deck: DeckInput!
  playerRefs: [ID!]!
  roomRef: ID!
  stage: String!
}

input CreateNewGameInput {
  playerRefs: [String!]!
  roomRef: String!
}

type CreateNewGameResponse {
  gameId: ID!
}

input CreatePlayerGameDetailsInput {
  ageAchievements: [ID!]!
  board: BoardInput!
  gameRef: ID!
  hand: [ID!]!
  playerRef: ID!
  scorePile: [ID!]!
  specialAchievements: [ID!]!
  username: String
}

input CreateRoomInput {
  roomName: String!
}

input CreateUserInput {
  email: String!
  password: String!
  username: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Deck {
  EIGHT: [ID!]!
  FIVE: [ID!]!
  FOUR: [ID!]!
  NINE: [ID!]!
  ONE: [ID!]!
  SEVEN: [ID!]!
  SIX: [ID!]!
  TEN: [ID!]!
  THREE: [ID!]!
  TWO: [ID!]!
}

input DeckInput {
  EIGHT: [ID!]!
  FIVE: [ID!]!
  FOUR: [ID!]!
  NINE: [ID!]!
  ONE: [ID!]!
  SEVEN: [ID!]!
  SIX: [ID!]!
  TEN: [ID!]!
  THREE: [ID!]!
  TWO: [ID!]!
}

type DogmaEffect {
  description: String!
  effectTypes: [String!]!
  isDemand: Boolean!
  isOptional: Boolean!
  repeat: Boolean!
  specialAchievement: String
}

input DrawInput {
  ageToDraw: Boolean
  countAsAction: Boolean!
  drawType: String!
  gameRef: ID!
  playerRef: ID!
}

type DrawResponse {
  ageDrawn: String
  gameId: ID!
  metadata: DrawResponseMetadata!
  playerId: ID!
}

type DrawResponseMetadata {
  currentActionUpdated: Boolean!
  gameStageUpdated: Boolean!
  updatedDeck: Deck
  updatedPlayerHand: [ID!]
}

input FindOneOptionsInput {
  searchField: String!
  searchValue: String!
}

type Game {
  _id: ID!
  ageAchievements: AgeAchievements!
  createdAt: DateTime
  currentActionNumber: Float!
  currentPlayerRef: ID!
  deck: Deck!
  playerRefs: [ID!]!
  roomRef: ID!
  stage: String!
  updatedAt: DateTime
  winnerRef: ID
}

input GetUserInput {
  email: String!
  password: String!
}

input MeldInput {
  cardRef: ID!
  countAsAction: Boolean!
  gameRef: ID!
  isStarterMeld: Boolean!
  meldType: String!
  playerRef: ID!
}

type MeldResponse {
  gameId: ID!
  metadata: MeldResponseMetadata!
  playerId: ID!
  updatedPlayerBoard: Board!
}

type MeldResponseMetadata {
  currentActionUpdated: Boolean!
  gameStageUpdated: Boolean!
  updatedDeck: Deck!
  updatedPlayerHand: [ID!]!
}

type Mutation {
  addPlayerToRoom(roomId: String!): Room
  closeRoom(roomId: String!): CloseRoomResponse!
  createNewGame(newGameData: CreateGameInput!): Game!
  createPlayerGameDetails(createData: CreatePlayerGameDetailsInput!): PlayerGameDetails!
  createRoom(newRoomData: CreateRoomInput!): Room!
  draw(drawInput: DrawInput!): DrawResponse!
  meld(meldInput: MeldInput!): MeldResponse!
  newGame(newGameDto: CreateNewGameInput!): CreateNewGameResponse!
  refreshToken: AccessTokenPayload!
  signup(newUserData: CreateUserInput!): AuthResponse!
  updateGame(id: ID!, updates: UpdateGameInput!): Game
  updatePlayerGameDetails(id: ID!, updates: UpdatePlayerGameDetailsInput!): PlayerGameDetails
  updateRoomAvailability(data: UpdateRoomAvailabilityInput!): Room
}

type PlayerGameDetails {
  _id: ID!
  ageAchievements: [ID!]!
  board: Board!
  createdAt: DateTime
  gameRef: ID!
  hand: [ID!]!
  playerRef: ID!
  scorePile: [ID!]!
  specialAchievements: [ID!]!
  updatedAt: DateTime
  username: String
}

type Query {
  getAllCards: [Card!]!
  getCardIdAndRefByAge: CardIdAndRefByAge!
  getCardRefsByAge: CardRefsByAge!
  getDetailsByGame(gameRef: ID!): [PlayerGameDetails!]!
  getGame(gameId: ID!): Game
  getOneCard(options: FindOneOptionsInput!): Card
  getPlayerGameDetails(gameRef: ID!, playerRef: ID!): PlayerGameDetails
  getPlayerGameDetailsById(id: ID!): PlayerGameDetails
  getPlayerGameDetailsWithUser(gameRef: ID!, playerRef: ID!): PlayerGameDetails
  getRoom(roomId: String!): Room
  getRoomsForPlayer: [Room!]
  isAuthenticated: UserWithoutPassword!
  login(loginUserInput: GetUserInput!): AuthResponse!
}

type ResourceSpaces {
  resourceSpace1: String
  resourceSpace2: String
  resourceSpace3: String
  resourceSpace4: String
}

type ResourceTotals {
  castles: Float!
  crowns: Float!
  factories: Float!
  leaves: Float!
  lightbulbs: Float!
  timepieces: Float!
}

input ResourceTotalsInput {
  castles: Float!
  crowns: Float!
  factories: Float!
  leaves: Float!
  lightbulbs: Float!
  timepieces: Float!
}

type Room {
  _id: ID!
  availableToJoin: Boolean!
  createdAt: DateTime
  hostRef: ID!
  name: String!
  playerRefs: [ID!]!
  updatedAt: DateTime
}

enum SplayOption {
  LEFT
  RIGHT
  UP
}

input UpdateGameInput {
  ageAchievements: AgeAchievementsInput
  currentActionNumber: Float
  currentPlayerRef: String
  deck: DeckInput
  stage: String
  winnerRef: String
}

input UpdatePlayerGameDetailsInput {
  ageAchievements: [ID!]
  board: BoardInput
  hand: [ID!]
  scorePile: [ID!]
  specialAchievements: [ID!]
}

input UpdateRoomAvailabilityInput {
  availableToJoin: Boolean!
  roomId: String!
}

type UserWithoutPassword {
  _id: ID!
  createdAt: DateTime
  email: String!
  updatedAt: DateTime
  username: String!
}