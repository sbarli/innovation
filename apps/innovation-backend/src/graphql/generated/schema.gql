# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Achievements {
  EIGHT: ID!
  FIVE: ID!
  FOUR: ID!
  NINE: ID!
  ONE: ID!
  SEVEN: ID!
  SIX: ID!
  THREE: ID!
  TWO: ID!
}

input AchievementsDto {
  EIGHT: ID!
  FIVE: ID!
  FOUR: ID!
  NINE: ID!
  ONE: ID!
  SEVEN: ID!
  SIX: ID!
  THREE: ID!
  TWO: ID!
}

type Board {
  blue: BoardPile!
  green: BoardPile!
  purple: BoardPile!
  red: BoardPile!
  yellow: BoardPile!
}

input BoardDto {
  blue: BoardPileDto!
  green: BoardPileDto!
  purple: BoardPileDto!
  red: BoardPileDto!
  yellow: BoardPileDto!
}

type BoardPile {
  cardRefs: [ID!]!
  splayed: SplayOption
}

input BoardPileDto {
  cardRefs: [ID!]!
  splayed: SplayOption
}

type Card {
  _id: ID
  age: String!
  cardId: String!
  dogmaEffects: [DogmaEffect!]!
  dogmaResource: String!
  name: String!
  resourceSpaces: ResourceSpaces!
  resourceTotals: ResourceTotals!
}

type CardIdAndRef {
  cardId: String!
  ref: ID!
}

type CardIdAndRefByAge {
  EIGHT: [CardIdAndRef!]!
  FIVE: [CardIdAndRef!]!
  FOUR: [CardIdAndRef!]!
  NINE: [CardIdAndRef!]!
  ONE: [CardIdAndRef!]!
  SEVEN: [CardIdAndRef!]!
  SIX: [CardIdAndRef!]!
  TEN: [CardIdAndRef!]!
  THREE: [CardIdAndRef!]!
  TWO: [CardIdAndRef!]!
}

type CardRefsByAge {
  EIGHT: [String!]!
  FIVE: [String!]!
  FOUR: [String!]!
  NINE: [String!]!
  ONE: [String!]!
  SEVEN: [String!]!
  SIX: [String!]!
  TEN: [String!]!
  THREE: [String!]!
  TWO: [String!]!
}

input CreateGameDto {
  _id: ID
  achievements: AchievementsDto!
  currentActionNumber: Float!
  currentPlayerRef: ID!
  deck: DeckDto!
  playerRefs: [ID!]!
  winnerRef: ID
}

input CreateNewGameInput {
  playerRefs: [String!]!
}

type CreateNewGameResponse {
  game: Game!
  playerGameDetails: [PlayerGameDetails!]!
}

input CreatePlayerDto {
  name: String!
  playerId: String!
}

input CreatePlayerGameDetailsDto {
  _id: ID
  achievements: [ID!]!
  age: Float!
  board: BoardDto!
  gameRef: ID!
  hand: [ID!]!
  playerRef: ID!
  resourceTotals: ResourceTotalsDto!
  score: Float!
  scoreCardRefs: [ID!]!
}

type Deck {
  EIGHT: [ID!]!
  FIVE: [ID!]!
  FOUR: [ID!]!
  NINE: [ID!]!
  ONE: [ID!]!
  SEVEN: [ID!]!
  SIX: [ID!]!
  TEN: [ID!]!
  THREE: [ID!]!
  TWO: [ID!]!
}

input DeckDto {
  EIGHT: [ID!]!
  FIVE: [ID!]!
  FOUR: [ID!]!
  NINE: [ID!]!
  ONE: [ID!]!
  SEVEN: [ID!]!
  SIX: [ID!]!
  TEN: [ID!]!
  THREE: [ID!]!
  TWO: [ID!]!
}

type DogmaEffect {
  description: String!
  effectTypes: [String!]!
  isDemand: Boolean!
  isOptional: Boolean!
  repeat: Boolean!
  specialAchievement: String
}

input FindOneOptionsInput {
  searchField: String!
  searchValue: String!
}

type Game {
  _id: ID
  achievements: Achievements!
  currentActionNumber: Float!
  currentPlayerRef: ID!
  deck: Deck!
  playerRefs: [ID!]!
  winnerRef: ID
}

input GetPlayerDto {
  searchField: String!
  searchValue: String!
}

type Mutation {
  createNewGame(newGameDto: CreateNewGameInput!): CreateNewGameResponse!
  createPlayer(createPlayerDto: CreatePlayerDto!): Player!
  createPlayerGameDetails(createPlayerGameDetailsDto: CreatePlayerGameDetailsDto!): PlayerGameDetails!
  updateGame(id: String!, updates: UpdateGameDto!): Game
  updatePlayerGameDetails(id: ID!, updates: UpdatePlayerGameDetailsDto!): PlayerGameDetails
}

type Player {
  _id: ID!
  name: String!
  playerId: String!
}

type PlayerGameDetails {
  _id: ID
  achievements: [ID!]!
  age: Float!
  board: Board!
  gameRef: ID!
  hand: [ID!]!
  playerRef: ID!
  resourceTotals: ResourceTotals!
  score: Float!
  scoreCardRefs: [ID!]!
}

type Query {
  getAllCards: [Card!]!
  getCardIdAndRefByAge: CardIdAndRefByAge!
  getCardRefsByAge: CardRefsByAge!
  getGame(gameRef: String!): Game
  getOneCard(options: FindOneOptionsInput!): Card
  getPlayer(getPlayerDto: GetPlayerDto!): Player
  getPlayerGameDetails(gameRef: ID!, playerRef: ID!): PlayerGameDetails
  getPlayerGameDetailsById(id: ID!): PlayerGameDetails
}

type ResourceSpaces {
  resourceSpace1: String
  resourceSpace2: String
  resourceSpace3: String
  resourceSpace4: String
}

type ResourceTotals {
  castles: Float!
  crowns: Float!
  factories: Float!
  leaves: Float!
  lightbulbs: Float!
  timepieces: Float!
}

input ResourceTotalsDto {
  castles: Float!
  crowns: Float!
  factories: Float!
  leaves: Float!
  lightbulbs: Float!
  timepieces: Float!
}

enum SplayOption {
  LEFT
  RIGHT
  UP
}

input UpdateGameDto {
  achievements: AchievementsDto
  currentActionNumber: Float
  currentPlayerRef: String
  deck: DeckDto
  winnerRef: String
}

input UpdatePlayerGameDetailsDto {
  achievements: [ID!]
  age: Float
  board: BoardDto
  hand: [ID!]
  resourceTotals: ResourceTotalsDto
  score: Float
  scoreCardRefs: [ID!]
}