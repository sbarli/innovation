# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Achievements {
  EIGHT: ID!
  FIVE: ID!
  FOUR: ID!
  NINE: ID!
  ONE: ID!
  SEVEN: ID!
  SIX: ID!
  THREE: ID!
  TWO: ID!
}

input AchievementsDto {
  EIGHT: ID!
  FIVE: ID!
  FOUR: ID!
  NINE: ID!
  ONE: ID!
  SEVEN: ID!
  SIX: ID!
  THREE: ID!
  TWO: ID!
}

type Card {
  _id: ID
  age: String!
  cardId: String!
  dogmaEffects: [DogmaEffect!]!
  dogmaResource: String!
  name: String!
  resourceSpaces: ResourceSpaces!
  resourceTotals: ResourceTotals!
}

type CardIdAndRef {
  cardId: String!
  ref: ID!
}

type CardIdAndRefByAge {
  EIGHT: [CardIdAndRef!]!
  FIVE: [CardIdAndRef!]!
  FOUR: [CardIdAndRef!]!
  NINE: [CardIdAndRef!]!
  ONE: [CardIdAndRef!]!
  SEVEN: [CardIdAndRef!]!
  SIX: [CardIdAndRef!]!
  TEN: [CardIdAndRef!]!
  THREE: [CardIdAndRef!]!
  TWO: [CardIdAndRef!]!
}

type CardRefsByAge {
  EIGHT: [String!]!
  FIVE: [String!]!
  FOUR: [String!]!
  NINE: [String!]!
  ONE: [String!]!
  SEVEN: [String!]!
  SIX: [String!]!
  TEN: [String!]!
  THREE: [String!]!
  TWO: [String!]!
}

input CreateGameDto {
  _id: ID
  achievements: AchievementsDto!
  currentActionNumber: Float!
  currentPlayerRef: ID!
  deck: DeckDto!
  playerRefs: [ID!]!
  winnerRef: ID
}

input CreatePlayerDto {
  name: String!
  playerId: String!
}

type Deck {
  EIGHT: [ID!]!
  FIVE: [ID!]!
  FOUR: [ID!]!
  NINE: [ID!]!
  ONE: [ID!]!
  SEVEN: [ID!]!
  SIX: [ID!]!
  TEN: [ID!]!
  THREE: [ID!]!
  TWO: [ID!]!
}

input DeckDto {
  EIGHT: [ID!]!
  FIVE: [ID!]!
  FOUR: [ID!]!
  NINE: [ID!]!
  ONE: [ID!]!
  SEVEN: [ID!]!
  SIX: [ID!]!
  TEN: [ID!]!
  THREE: [ID!]!
  TWO: [ID!]!
}

type DogmaEffect {
  description: String!
  effectTypes: [String!]!
  isDemand: Boolean!
  isOptional: Boolean!
  repeat: Boolean!
  specialAchievement: String
}

input FindOneOptionsInput {
  searchField: String!
  searchValue: String!
}

type Game {
  _id: ID
  achievements: Achievements!
  currentActionNumber: Float!
  currentPlayerRef: ID!
  deck: Deck!
  playerRefs: [ID!]!
  winnerRef: ID
}

input GetPlayerDto {
  searchField: String!
  searchValue: String!
}

type Mutation {
  createNewGame(createGameDto: CreateGameDto!): Game!
  createPlayer(createPlayerDto: CreatePlayerDto!): Player!
  updateGame(gameId: String!, updates: UpdateGameDto!): Game
}

type Player {
  _id: ID!
  name: String!
  playerId: String!
}

type Query {
  getAllCards: [Card!]!
  getCardIdAndRefByAge: CardIdAndRefByAge!
  getCardRefsByAge: CardRefsByAge!
  getGame(gameRef: String!): Game
  getOneCard(options: FindOneOptionsInput!): Card
  getPlayer(getPlayerDto: GetPlayerDto!): Player
}

type ResourceSpaces {
  resourceSpace1: String
  resourceSpace2: String
  resourceSpace3: String
  resourceSpace4: String
}

type ResourceTotals {
  castles: Float!
  crowns: Float!
  factories: Float!
  leaves: Float!
  lightbulbs: Float!
  timepieces: Float!
}

input UpdateGameDto {
  achievements: AchievementsDto
  currentActionNumber: Float
  currentPlayerRef: String
  deck: DeckDto
  winnerRef: String
}